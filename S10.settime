#!/usr/bin/env ruby
# -*- ruby encoding: utf-8 -*-

class VDRWakeupSystemTime
  require "time"
  require "logger"


  # Command to set the System Date/Time
  SETTIME              = "/bin/date --set=\"%s\""
  SETDATEFORMAT        = "%Y-%m-%d %H:%M:%S"

  # Logfile
  LOGFILE              = "settime.log"
  LOGDATEFORMAT        = "%a, %d.%m.%Y %H:%M:%S"
  LOGLEVEL             = Logger::DEBUG

  # Constructor
  def initialize
    @logger = Logger.new(LOGFILE, 10, 1024000)
    @logger.level = LOGLEVEL
    self._initBiosTime
  end

  # Sets a new Wakeup
  # @param timestamp
  # @param offset
  def setWakeup(timestamp, offset = 10)
    wakeuptime = Time.at timestamp
    wakeup_in_seconds = wakeuptime.to_i - Time.now.to_i

    self.log "wakeup in seconds: %.0f (%.0f min)" % [wakeup_in_seconds, wakeup_in_seconds/60], Logger::DEBUG

    if wakeup_in_seconds > 0
      self.log "next Wakeup: #{wakeuptime.strftime(LOGDATEFORMAT)}"
      self.log "   Timestamp: #{timestamp}", Logger::DEBUG
      self.log " with #{offset} min offset: #{Time.at(timestamp - (offset*60)).to_i}", Logger::DEBUG
      self.log " #{Time.at(timestamp - (offset*60)).strftime(LOGDATEFORMAT)}", Logger::DEBUG

      unless @wakeonalarm
        raise "no wakeonalarm set"
      end

      system_time = Time.at(@wakeonalarm.to_i - wakeup_in_seconds + (offset*60))
      self._setSystemTime system_time

    else
      self.log "no next wakeup set"
    end
  end

  # Logs a message
  # @param message
  # @param level
  def log(message, level = Logger::INFO)
    @logger.add level, message, "VDRWakeupSystemTime"
  end

  protected

  # init the bios time to calculate the system time for wakeup
  def _initBiosTime
    # The Date/Time for BIOS WakeOnAlarm
    woa_year = Time.now.year
    woa_month = Time.now.month

    if Time.now.day == 1
            woa_month = woa_month - 1
            if Time.now.month == 1
                    woa_year = woa_year - 1
                    woa_month = 12
            end
    end

    @wakeonalarm = Time.local(woa_year,woa_month,1,23,59,59)
  end

  # sets the system time and writes it to the bios
  def _setSystemTime time
    self.log "setting system time to #{time.strftime(LOGDATEFORMAT)}"
    self.log " Timestamp: #{time.to_i}"

    if time.utc? == false
      time = Time.at(time.to_i + time.gmt_offset)
            self.log "setting system time (utc) to #{time.strftime(LOGDATEFORMAT)}"
            self.log " Offset: #{time.gmt_offset} Timestamp: #{time.to_i}"
    end

    system "/sbin/hwclock -w"
    system SETTIME % time.strftime(SETDATEFORMAT)
  end
end

w = VDRWakeupSystemTime.new
w.log "=== new settime call ==="
w.log "Script: #{File.expand_path(__FILE__)}", Logger::DEBUG
w.log "AGRV: #{ARGV}", Logger::DEBUG
w.log "Time now: #{Time.now.strftime("%a, %d.%m.%Y %H:%M:%S")}", Logger::DEBUG
w.setWakeup ARGV[0].to_i
